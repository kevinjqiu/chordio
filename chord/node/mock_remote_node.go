// Code generated by mockery v1.0.0. DO NOT EDIT.

package node

import chord "github.com/kevinjqiu/chordio/chord"
import context "context"
import mock "github.com/stretchr/testify/mock"
import pb "github.com/kevinjqiu/chordio/pb"

// MockRemoteNode is an autogenerated mock type for the RemoteNode type
type MockRemoteNode struct {
	mock.Mock
}

// AsProtobufNode provides a mock function with given fields:
func (_m *MockRemoteNode) AsProtobufNode() *pb.Node {
	ret := _m.Called()

	var r0 *pb.Node
	if rf, ok := ret.Get(0).(func() *pb.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Node)
		}
	}

	return r0
}

// ClosestPrecedingFinger provides a mock function with given fields: _a0, _a1
func (_m *MockRemoteNode) ClosestPrecedingFinger(_a0 context.Context, _a1 chord.ID) (Node, error) {
	ret := _m.Called(_a0, _a1)

	var r0 Node
	if rf, ok := ret.Get(0).(func(context.Context, chord.ID) Node); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, chord.ID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPredecessor provides a mock function with given fields: _a0, _a1
func (_m *MockRemoteNode) FindPredecessor(_a0 context.Context, _a1 chord.ID) (Node, error) {
	ret := _m.Called(_a0, _a1)

	var r0 Node
	if rf, ok := ret.Get(0).(func(context.Context, chord.ID) Node); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, chord.ID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSuccessor provides a mock function with given fields: _a0, _a1
func (_m *MockRemoteNode) FindSuccessor(_a0 context.Context, _a1 chord.ID) (Node, error) {
	ret := _m.Called(_a0, _a1)

	var r0 Node
	if rf, ok := ret.Get(0).(func(context.Context, chord.ID) Node); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, chord.ID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBind provides a mock function with given fields:
func (_m *MockRemoteNode) GetBind() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *MockRemoteNode) GetID() chord.ID {
	ret := _m.Called()

	var r0 chord.ID
	if rf, ok := ret.Get(0).(func() chord.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chord.ID)
	}

	return r0
}

// GetPredNode provides a mock function with given fields:
func (_m *MockRemoteNode) GetPredNode() (*NodeRef, error) {
	ret := _m.Called()

	var r0 *NodeRef
	if rf, ok := ret.Get(0).(func() *NodeRef); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NodeRef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuccNode provides a mock function with given fields:
func (_m *MockRemoteNode) GetSuccNode() (*NodeRef, error) {
	ret := _m.Called()

	var r0 *NodeRef
	if rf, ok := ret.Get(0).(func() *NodeRef); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NodeRef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields:
func (_m *MockRemoteNode) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateFingerTableEntry provides a mock function with given fields: ctx, s, i
func (_m *MockRemoteNode) UpdateFingerTableEntry(ctx context.Context, s Node, i int) error {
	ret := _m.Called(ctx, s, i)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Node, int) error); ok {
		r0 = rf(ctx, s, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// setLocalNodeConstructor provides a mock function with given fields: _a0
func (_m *MockRemoteNode) setLocalNodeConstructor(_a0 localNodeConstructor) {
	_m.Called(_a0)
}

// setRemoteNodeConstructor provides a mock function with given fields: _a0
func (_m *MockRemoteNode) setRemoteNodeConstructor(_a0 remoteNodeConstructor) {
	_m.Called(_a0)
}

// Code generated by mockery v1.0.0. DO NOT EDIT.

package node

import (
	context "context"

	chord "github.com/kevinjqiu/chordio/chord"

	mock "github.com/stretchr/testify/mock"
)

// mockFactory is an autogenerated mock type for the factory type
type mockFactory struct {
	mock.Mock
}

// newLocalNode provides a mock function with given fields: id, bind, m
func (_m *mockFactory) newLocalNode(id chord.ID, bind string, m chord.Rank) (LocalNode, error) {
	ret := _m.Called(id, bind, m)

	var r0 LocalNode
	if rf, ok := ret.Get(0).(func(chord.ID, string, chord.Rank) LocalNode); ok {
		r0 = rf(id, bind, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(LocalNode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(chord.ID, string, chord.Rank) error); ok {
		r1 = rf(id, bind, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newRemoteNode provides a mock function with given fields: ctx, bind
func (_m *mockFactory) newRemoteNode(ctx context.Context, bind string) (RemoteNode, error) {
	ret := _m.Called(ctx, bind)

	var r0 RemoteNode
	if rf, ok := ret.Get(0).(func(context.Context, string) RemoteNode); ok {
		r0 = rf(ctx, bind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(RemoteNode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
